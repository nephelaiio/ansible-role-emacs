  (spacemacs/set-leader-keys "wq" (lambda () (interactive) (save-buffer) (kill-buffer-and-window)))

  (setq haskell-completion-backend 'ghci)

  (setq projectile-git-submodule-command nil)

  (setq helm-make-list-target-method 'qp)
  (setq helm-make-sort-targets t)

  (setq ansible-vault-dir "~/.ansible_vault")
  (setq ansible-inventory-dir "./inventory/")

  (defun ansible-vault-insert-secret ()
    "Insert xkcd secret"
    (interactive)
    (push-mark)
    (next-line)
    (setq secret_start (point))
    (exchange-point-and-mark)
    (pop-mark)
    (setq vault (completing-read "vault: " (directory-files ansible-vault-dir nil "^[^.]")))
    (setq xksecret (format "%02d_%s_%02d" (random 100) (shell-command-to-string "printf %s \"$(xkcdpass -d _ -C alternating -n 3)\"") (random 100)))
    (setq xkvault (shell-command-to-string (format "ansible-vault encrypt_string --encrypt-vault-id %s %s" vault xksecret)))
    (insert (format " %s" xkvault))
    (delete-blank-lines)
    (push-mark)
    (indent-region secret_start (point))
    (exchange-point-and-mark)
    (pop-mark))
  (spacemacs/set-leader-keys "og" 'ansible-vault-insert-secret)

  (defun ansible-vault-encrypt-secret ()
    "Encrypt word as secret"
    (interactive)
    (push-mark)
    (setq vault (completing-read "vault: " (directory-files ansible-vault-dir nil "^[^.]")))
    (setq word (evil-inner-WORD))
    (next-line)
    (setq secret_start (point))
    (exchange-point-and-mark)
    (pop-mark)
    (let ((beg (pop word))
          (end (pop word)))
      (kill-region beg end)
      (setq xksecret (car kill-ring-yank-pointer))
      (setq xkvault (shell-command-to-string (format "ansible-vault encrypt_string --encrypt-vault-id %s %s" vault xksecret)))
      (insert xkvault)
      (pop kill-ring)
      (delete-blank-lines)
      (push-mark)
      (indent-region secret_start (point))
      (exchange-point-and-mark)
      (pop-mark)))
  (spacemacs/set-leader-keys "oe" 'ansible-vault-encrypt-secret)
